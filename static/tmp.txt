<!DOCTYPE html>

<head>

    <title>NYC Boba</title>
    <meta charset="utf-8" />
    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
</head>

<body>



    <script>



        var params = {
            const form = html`<form>
        <table style="width: auto">
            <tr>
                <th colspan="3">Cup dimension</th>
            </tr>
            <tr>
                <td><i>Top radius</i></td>
                <td><input type="range" name="cupTopRadius" value="${9.5 / 2}" min="${5.5 / 2}" max="${15.5 / 2}" step="1"
                        style="width: 200px;"></td>
                <td style="text-align: right;"><span class="cupTopRadius"></span> ${unit}</td>
            </tr>
            <tr>
                <td><i>Bottom radius</i></td>
                <td><input type="range" name="cupBottomRadius" value="${7.5 / 2}" min="${7.5 / 2}" max="${15.5 / 2}" step="1"
                        style="width: 200px;"></td>
                <td style="text-align: right;"><span class="cupBottomRadius"></span> ${unit}</td>
            </tr>
            <tr>
                <td><i>Height</i></td>
                <td><input type="range" name="cupHeight" value="15.5" min="10.5" max="15.5" step="1"
                        style="width: 200px;"></td>
                <td style="text-align: right;"><span class="cupHeight"></span> ${unit}</td>
            </tr>
            <tr>
                <th colspan="3">What you put in the cup</th>
            </tr>
            <tr>
                <td><i>Tea volume</i></td>
                <td><input type="range" name="teaVolume" value="450" min="100" max="600" step="5" style="width: 200px;">
                </td>
                <td style="text-align: right;"><span class="teaVolume"></span> ${unit}<sup>3</sup></td>
            </tr>
            <tr>
                <td><i>Ice volume</i></td>
                <td><input name="iceVolume" type=range value="135" min="0" max="300" step="5" style="width: 200px;">
                </td>
                <td style="text-align: right;"><span class="iceVolume"></span> ${unit}<sup>3</sup></td>
            </tr>
            <tr>
                <td><i>Boba volume</i></td>
                <td><input name="bobaVolume" type=range value="110" min="0" max="300" step="5" style="width: 200px;">
                </td>
                <td style="text-align: right;"><span class="bobaVolume"></span> ${unit}<sup>3</sup></td>
            </tr>
            <tr>
                <td><i>Boba radius</i></td>
                <td><input type="range" name="bobaRadius" value="0.6" min="0.4" max="0.6" step="0.2"
                        style="width: 200px;"></td>
                <td style="text-align: right;"><span class="bobaRadius"></span> ${unit}</td>
            </tr>
            <tr>
                <th colspan="3">How you drink it</th>
            </tr>
            <tr>
                <td><i>Tea consumption</i></td>
                <td><input type="range" name="teaEfficiency" value="100" min="80" max="200" step="10"
                        style="width: 200px;"></td>
                <td style="text-align: right;"><span class="teaEfficiency"></span> % of normal</td>
            </tr>
            <tr>
                <td><i>Boba consumption</i></td>
                <td><input type="range" name="bobaEfficiency" value="100" min="80" max="200" step="10"
                        style="width: 200px;"></td>
                <td style="text-align: right;"><span class="bobaEfficiency"></span> % of normal</td>
            </tr>
            <tr>
                <td><i>Ice melted per sip</i></td>
                <td><input type="range" name="iceMeltRatio" value="1" min="0" max="25" step="1" style="width: 200px;">
                </td>
                <td style="text-align: right;"><span class="iceMeltRatio"></span> %</td>
            </tr>
        </table>
    </form>`;
            form.oninput = () => {
                const fields = [
                    'cupTopRadius',
                    'cupBottomRadius',
                    'cupHeight',
                    'teaVolume',
                    'bobaVolume',
                    'bobaRadius',
                    'iceVolume',
                    'teaEfficiency',
                    'bobaEfficiency',
                    'iceMeltRatio',
                ];
                form.value = fields.reduce((acc, curr) => {
                    const value = form[curr].valueAsNumber;
                    acc[curr] = value;
                    const label = form.querySelector(`.${curr}`);
                    if (label) {
                        label.innerText = value;
                    }
                    return acc;
                }, {});
            };
            form.oninput();
            return form;
        }



        // CONSTANTS
        const unit = 'cm'
        const INCH_TO_CM = 2.54



        // VARIABLES
        // define simulations
        simulations = ({
            original: new Simulation(),
            fatCup: new Simulation({
                bubbleTea: new BubbleTea({
                    cup: new Cup({ topRadius: 6, bottomRadius: 5, height: 13 }),
                }),
            }),
            noIce: new Simulation({
                bubbleTea: new BubbleTea({
                    iceVolume: 0,
                }),
            }),
            noIceExtraBoba: new Simulation({
                bubbleTea: new BubbleTea({
                    bobaVolume: 220,
                    iceVolume: 0,
                }),
            }),
            teaDrinker: new Simulation({
                drinker: new Drinker({
                    teaEfficiency: [2, 2],
                }),
            }),
            bobaDrinker: new Simulation({
                drinker: new Drinker({
                    bobaEfficiency: [2, 2],
                }),
            }),
        })

        // define simulation states
        simulationStates = _.mapValues(simulations, s => s.run())

        // defines params called to make graph fxn
        customSimulationStates = new Simulation({
            drinker: new Drinker({
                teaEfficiency: [params.teaEfficiency / 100, params.teaEfficiency / 100],
                bobaEfficiency: [params.bobaEfficiency / 100, params.bobaEfficiency / 100],
                iceMeltRatio: params.iceMeltRatio / 100,
            }),
            bubbleTea: new BubbleTea({
                cup: new Cup({
                    height: params.cupHeight,
                    topRadius: params.cupTopRadius,
                    bottomRadius: params.cupBottomRadius,
                }),
                straw: new Straw(),
                boba: new Boba({ radius: params.bobaRadius }),
                ice: new IceCube(),
                teaVolume: params.teaVolume,
                bobaVolume: params.bobaVolume,
                iceVolume: params.iceVolume,
            }),
        }).run()



        // COMPUTATION
        function frustumVolume(r1, r2, h) {
            return Math.PI * h / 3 * (r1 * r1 + r1 * r2 + r2 * r2);
        }




        // RENDERING
        function drawChart(states) {
            return vegalite({
                data: {
                    values: _.flatMap(states, state => [
                        { t: state.t, field: 'tea', value: state.bubbleTea.teaVolume },
                        { t: state.t, field: 'boba', value: state.bubbleTea.bobaVolume },
                        { t: state.t, field: 'ice', value: state.bubbleTea.iceVolume },
                    ])
                },
                mark: { type: "area", interpolate: "step" },
                width,
                height: 200,
                autosize: "fit",
                encoding: {
                    x: {
                        field: "t",
                        type: "quantitative",
                        axis: { tickCount: 5, title: "No. of sips" }
                    },
                    y: {
                        "aggregate": "sum",
                        field: "value",
                        type: "quantitative",
                        axis: { format: "f", title: "Volume (ml)" }
                    },
                    color: {
                        field: "field",
                        type: "nominal",
                        scale: {
                            domain: ['tea', 'boba', 'ice'],
                            range: ['#D2B799', '#222', '#54CAD2']
                        },
                    }
                }
            });
        }

        // fxn call to make graph
        drawChart(customSimulationStates)



    </script>


</body>

</html>